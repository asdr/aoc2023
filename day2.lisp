(in-package :aoc)


(defun check-game-passes (line requirement index)
                                        ;(let (;(line "Game 1: 9 red, 2 green, 13 blue; 10 blue, 2 green, 13 red; 8 blue, 3 red, 6 green; 5 green, 2 red, 1 blue")
                                        ;(red 0)
                                        ;(green 0)
                                        ;(blue 0))
                                        ;(progn
  (let ((game-data (cadr (cl-ppcre:split ":" line))))
    (let ((game-sets (cl-ppcre:split ";" game-data)))
      (if (every #'(lambda (a-set)
                     (let ((color-data (cl-ppcre:split ", " a-set)))
                       (every #'(lambda (a-color-data)
                                  (let ((a-color (string-trim " " a-color-data))
                                        (red1 0)
                                        (green1 0)
                                        (blue1 0))
                                    (cond ((ends-with a-color "red")
                                           (setf red1 (parse-integer (string-trim " red" a-color)))
                                        ;(setf red (+ red red1))
                                           )
                                          ((ends-with a-color "green")
                                           (setf green1 (parse-integer (string-trim " green" a-color)))
                                        ;(setf green (+ green green1))
                                           )
                                          ((ends-with a-color "blue")
                                           (setf blue1 (parse-integer (string-trim " blue" a-color)))
                                        ;(setf blue (+ blue blue1))
                                           ))
                                        ;(format t "G:~A R:~A G:~A B:~A" index red green blue)
                                    (and (<= red1 (car requirement))
                                         (<= green1 (cadr requirement))
                                         (<= blue1 (caddr requirement)))))
                              color-data)))
                 game-sets)
          index
          0))))

;; day2 - part 1
(defun day2-part1 ()
  (let ((index 0)
        (total 0))
    (for-each-line #P"input2.txt"
      (setf index (1+ index))
      (setf total (+ total (check-game-passes line '(12 13 14) index))))
    total))


(defun calc-power-of-minimum-set (line)
  (let ((game-data (cadr (cl-ppcre:split ":" line)))
        (red 1)
        (green 1)
        (blue 1))
    (let ((game-sets (cl-ppcre:split ";" game-data)))
      (dolist (a-set game-sets)
        (let ((color-data (cl-ppcre:split ", " a-set)))
          (dolist (a-color-data color-data)
            (let ((a-color (string-trim " " a-color-data)))
              (cond ((ends-with a-color "red")
                     (setf red (max red (parse-integer (string-trim " red" a-color)))))
                    ((ends-with a-color "green")
                     (setf green (max green (parse-integer (string-trim " green" a-color)))))
                    ((ends-with a-color "blue")
                     (setf blue (max blue (parse-integer (string-trim " blue" a-color)))))))))))
    (* red green blue)))

;; day2 - part 2
(defun day2-part2 ()
  (let ((index 0)
        (total 0))
    (for-each-line #P"input2.txt"
      (setf index (1+ index))
      (setf total (+ total (calc-power-of-minimum-set line))))
    total))
